{"version":3,"file":"ol-elevation-parser.js","sources":["../src/tiles.ts","../src/helpers.ts","../src/logger.ts","../src/defaults.ts","../src/readFromImage.ts","../src/ol-elevation-parser.ts"],"sourcesContent":["import Geometry from 'ol/geom/Geometry';\nimport VectorSource from 'ol/source/Vector';\nimport { getUid } from 'ol/util';\nimport TileImage from 'ol/source/TileImage';\n\nlet tiles: { [key: string]: HTMLImageElement } = {};\n\nexport const addTile = (tileKey: string, tile: HTMLImageElement) => {\n    tiles[tileKey] = tile;\n};\n\nexport const getTile = (key: string) => {\n    return tiles[key];\n};\n\nexport const getTiles = () => {\n    return tiles;\n};\n\nexport const cleanTiles = () => {\n    tiles = {};\n};\n\nexport const getTileKey = (\n    source: TileImage | VectorSource<Geometry>,\n    tileCoord: number[]\n) => {\n    const uidSource = getUid(source);\n    return uidSource + '_' + tileCoord.join('-');\n};\n","// @turf\nimport bbox from '@turf/bbox';\nimport area from '@turf/area';\nimport intersect from '@turf/intersect';\nimport { featureCollection } from '@turf/helpers';\nimport squareGrid from '@turf/square-grid';\n\nimport { Coordinate } from 'ol/coordinate';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Feature from 'ol/Feature';\nimport GeoJSON from 'ol/format/GeoJSON';\n\nconst geojson = new GeoJSON();\n\n/**\n *\n * @param target\n * @param sources\n * @returns\n */\nexport const deepObjectAssign = (target, ...sources) => {\n    sources.forEach((source) => {\n        Object.keys(source).forEach((key) => {\n            const s_val = source[key];\n            const t_val = target[key];\n            target[key] =\n                t_val &&\n                s_val &&\n                typeof t_val === 'object' &&\n                typeof s_val === 'object' &&\n                !Array.isArray(t_val) // Don't merge arrays\n                    ? deepObjectAssign(t_val, s_val)\n                    : s_val;\n        });\n    });\n    return target;\n};\n\nexport const getLineSamples = (\n    geom: LineString,\n    samples: number\n): Coordinate[] => {\n    const stepPercentage = 100 / samples;\n\n    const totalLength = geom.getLength();\n\n    const metersSample = totalLength * (stepPercentage / 100);\n\n    const sampledCoords: Coordinate[] = [];\n    let segmentCount = 0;\n\n    // Get samples every percentage step while conserving all the vertex\n    geom.forEachSegment((start, end) => {\n        // Only get the first start segment\n        if (!segmentCount) {\n            sampledCoords.push(start);\n        }\n\n        segmentCount++;\n\n        const segmentGeom = new LineString([start, end]);\n        const segmentLength = segmentGeom.getLength();\n\n        /**\n         * segmentLength -> 100\n         * metersSample -> x\n         */\n        const newPercentage = (100 * metersSample) / segmentLength;\n\n        // skip 0 and 100\n        let segmentStepPercent = newPercentage;\n        while (segmentStepPercent < 100) {\n            const coordAt = segmentGeom.getCoordinateAt(\n                segmentStepPercent / 100\n            );\n            sampledCoords.push(coordAt);\n            segmentStepPercent = segmentStepPercent + newPercentage;\n        }\n\n        sampledCoords.push(end);\n    });\n\n    return sampledCoords;\n};\n\n/**\n * @param polygonFeature\n * @param nSamples\n * @returns\n */\nexport const getPolygonSamples = (\n    polygonFeature: Feature<Polygon>,\n    projection: string,\n    nSamples: number | 'auto'\n): Feature<Polygon>[] => {\n    const polygon = geojson.writeFeatureObject(polygonFeature, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: projection\n    }) as any;\n\n    const areaPol = area(polygon.geometry);\n\n    let sampleMeters: number;\n\n    if (nSamples !== 'auto') {\n        sampleMeters = nSamples;\n    } else {\n        if (areaPol <= 1000) sampleMeters = 0.5;\n        else if (areaPol < 10000) sampleMeters = 1;\n        else sampleMeters = 10;\n    }\n\n    const polygonBbox = bbox(polygon);\n\n    const grid = squareGrid(polygonBbox, sampleMeters / 1000, {\n        units: 'kilometers',\n        mask: polygon.geometry\n    });\n\n    let clippedGrid = grid.features.map((feature) =>\n        intersect(feature.geometry, polygon)\n    );\n\n    // Remove some random null values\n    clippedGrid = clippedGrid.filter((feature) => feature);\n\n    const clippedGridF = featureCollection(clippedGrid);\n\n    return geojson.readFeatures(clippedGridF, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: projection\n    }) as Feature<Polygon>[];\n};\n\nexport const average = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;\n\n/**\n *\n * @param src\n * @returns\n */\nexport const addSrcToImage = (\n    img: HTMLImageElement,\n    src: string\n): Promise<any> => {\n    return new Promise((resolve, reject) => {\n        img.onload = () => resolve(img.height);\n        img.onerror = reject;\n        img.src = src;\n    });\n};\n","export let loggerIsEnabled = false;\n\nexport const setLoggerActive = (bool: boolean) => {\n    loggerIsEnabled = bool;\n};\n\nexport default function logger(...args) {\n    if (loggerIsEnabled) console.log(...args);\n}\n","import { IOptions } from './ol-elevation-parser';\nimport { loggerIsEnabled } from './logger';\n\nconst options: IOptions = {\n    source: null,\n    calculateZMethod: 'getFeatureInfo',\n    samples: 50,\n    sampleSizeArea: 'auto',\n    noDataValue: -10000,\n    verbose: loggerIsEnabled\n};\n\nexport default options;\n","import axios from 'axios';\n\nimport { PluggableMap } from 'ol';\nimport View from 'ol/View';\n\nimport { Coordinate } from 'ol/coordinate';\nimport {\n    getForProjection as getTileGridForProjection,\n    createXYZ\n} from 'ol/tilegrid';\nimport TileGrid from 'ol/tilegrid/TileGrid';\nimport XYZ from 'ol/source/XYZ';\nimport TileImage from 'ol/source/TileImage';\nimport { Projection } from 'ol/proj';\n\nimport { addSrcToImage } from './helpers';\n\nimport { addTile, getTile, getTileKey } from './tiles';\nimport { IOptions } from './ol-elevation-parser';\n\nconst AXIOS_TIMEOUT = 5000;\n\nconst mapboxExtractElevation = (r: number, g: number, b: number): number => {\n    return (r * 256 * 256 + g * 256 + b) * 0.1 - 10000;\n};\n\nconst terrariumExtractElevation = (r: number, g: number, b: number): number => {\n    return r * 256 + g + b / 256 - 32768;\n};\n\nexport default class ReadFromImage {\n    protected _tileGrid: TileGrid;\n    protected _projection: Projection;\n    protected _source: TileImage | XYZ;\n    protected _view: View;\n    protected _calculateZMethod: IOptions['calculateZMethod'];\n    protected _canvas: HTMLCanvasElement;\n    protected _ctx: CanvasRenderingContext2D;\n    protected _img: HTMLImageElement;\n    protected _urlFn;\n    protected _draws = {};\n\n    constructor(\n        source: TileImage | XYZ,\n        calculateZMethod: IOptions['calculateZMethod'],\n        map: PluggableMap\n    ) {\n        this._projection =\n            source.getProjection() || map.getView().getProjection();\n        this._view = map.getView();\n        this._urlFn = source.getTileUrlFunction();\n        this._tileGrid = this._getTileGrid(source);\n        this._source = source;\n\n        this._calculateZMethod = calculateZMethod;\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n    }\n\n    async read(coordinate: Coordinate) {\n        // clear canvas\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n\n        const tileCoord = this._tileGrid.getTileCoordForCoordAndResolution(\n            coordinate,\n            this._view.getResolution()\n        );\n\n        const url = this._urlFn(tileCoord, 1, this._projection);\n\n        const tileKey = getTileKey(this._source, tileCoord);\n        let img;\n\n        if (!this._draws[tileKey]) {\n            let imageTile = getTile(tileKey);\n\n            // Check if the image was already downloaded\n            if (!getTile(tileKey)) {\n                const { data } = await axios.get(url, {\n                    timeout: AXIOS_TIMEOUT,\n                    responseType: 'blob'\n                });\n                const urlCreator = window.URL || window.webkitURL;\n                const imageSrc = urlCreator.createObjectURL(data);\n                const imageElement = new Image();\n                await addSrcToImage(imageElement, imageSrc);\n                addTile(tileKey, imageElement);\n                imageTile = imageElement;\n            }\n\n            this._canvas.width = imageTile.width;\n            this._canvas.height = imageTile.height;\n\n            //@ts-expect-error\n            this._ctx.mozImageSmoothingEnabled = false;\n            //@ts-expect-error\n            this._ctx.oImageSmoothingEnabled = false;\n            //@ts-expect-error\n            this._ctx.webkitImageSmoothingEnabled = false;\n            //@ts-expect-error\n            this._ctx.msImageSmoothingEnabled = false;\n            this._ctx.imageSmoothingEnabled = false;\n\n            // Add image to a canvas\n            this._ctx.drawImage(imageTile, 0, 0);\n\n            img = this._ctx.getImageData(\n                0,\n                0,\n                this._canvas.width,\n                this._canvas.height\n            );\n            this._draws[tileKey] = img;\n        }\n\n        img = this._draws[tileKey];\n\n        const zoom = tileCoord[0];\n        const origin = this._tileGrid.getOrigin(zoom);\n        const res = this._tileGrid.getResolution(zoom);\n        const tileSize = this._tileGrid.getTileSize(zoom);\n\n        const w = Math.floor(\n            ((coordinate[0] - origin[0]) / res) %\n                (tileSize[0] | (tileSize as number))\n        );\n        const h = Math.floor(\n            ((origin[1] - coordinate[1]) / res) %\n                (tileSize[1] | (tileSize as number))\n        );\n\n        const imgData = img.data;\n        const index = (w + h * 256) * 4;\n        const pixel = [\n            imgData[index + 0],\n            imgData[index + 1],\n            imgData[index + 2],\n            imgData[index + 3]\n        ];\n\n        return this._extractValuesFromPixelDEM(pixel);\n    }\n\n    /**\n     *\n     * @param source\n     * @returns\n     */\n    _getTileGrid(source) {\n        let tilegrid = source.getTileGrid();\n        // If not tileGrid is provided, set a default for XYZ sources\n        if (!tilegrid) {\n            if (source instanceof XYZ) {\n                const defaultTileGrid = createXYZ();\n                tilegrid = new TileGrid({\n                    origin: defaultTileGrid.getOrigin(0),\n                    resolutions: defaultTileGrid.getResolutions()\n                });\n            } else {\n                tilegrid = getTileGridForProjection(this._projection);\n            }\n        }\n\n        return tilegrid;\n    }\n\n    /**\n     * @protected\n     * @param pixel\n     * @returns\n     */\n    _extractValuesFromPixelDEM(pixel: number[]): number {\n        if (\n            this._calculateZMethod &&\n            typeof this._calculateZMethod === 'function'\n        ) {\n            return this._calculateZMethod(pixel[0], pixel[1], pixel[2]);\n        } else if (this._calculateZMethod === 'Mapbox') {\n            return mapboxExtractElevation(pixel[0], pixel[1], pixel[2]);\n        } else if (this._calculateZMethod === 'Terrarium') {\n            return terrariumExtractElevation(pixel[0], pixel[1], pixel[2]);\n        }\n    }\n}\n","import LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\nimport Polygon from 'ol/geom/Polygon';\nimport Control, { Options as ControlOptions } from 'ol/control/Control';\nimport { PluggableMap } from 'ol';\nimport TileImage from 'ol/source/TileImage';\nimport TileWMS from 'ol/source/TileWMS';\nimport XYZ from 'ol/source/XYZ';\nimport View from 'ol/View';\nimport { Coordinate } from 'ol/coordinate';\nimport Feature from 'ol/Feature';\n\nimport axios from 'axios';\n\nimport { addTile, cleanTiles, getTileKey } from './tiles';\nimport { deepObjectAssign, getLineSamples, getPolygonSamples } from './helpers';\nimport defaultOptions from './defaults';\nimport logger, { setLoggerActive } from './logger';\nimport ReadFromImage from './readFromImage';\n\nconst AXIOS_TIMEOUT = 5000;\n\n/**\n * @extends {ol/control/Control~Control}\n * @fires change:samples\n * @fires change:source\n * @fires change:calculateZMethod\n * @param opt_options\n */\nexport default class ElevationParser extends Control {\n    protected _options: IOptions;\n    protected _map: PluggableMap;\n    protected _countConnections = 0;\n    protected _readFromImage: ReadFromImage;\n\n    protected _initialized = false;\n\n    constructor(options: IOptions) {\n        super({});\n\n        this._options = deepObjectAssign(defaultOptions, options);\n\n        // Change the default 'getFeatureInfo' method if the source is not TileWMS\n        if (\n            !(this._options.source instanceof TileWMS) &&\n            this._options.calculateZMethod === 'getFeatureInfo'\n        ) {\n            this._options.calculateZMethod = 'Mapbox';\n        }\n\n        setLoggerActive(this._options.verbose);\n    }\n\n    /**\n     * @public\n     * @param source\n     */\n    setSource(source: IOptions['source']): void {\n        this.set('source', source);\n    }\n\n    /**\n     * @public\n     * @param samples\n     */\n    setSamples(samples: IOptions['samples']): void {\n        this.set('samples', samples);\n    }\n\n    /**\n     * @public\n     * @param calculateZMethod\n     */\n    setCalculateZMethod(calculateZMethod: IOptions['calculateZMethod']): void {\n        this.set('calculateZMethod', calculateZMethod);\n    }\n\n    /**\n     * @public\n     * @param noDataValue\n     */\n    setNoDataValue(noDataValue: IOptions['noDataValue']): void {\n        this.set('noDataValue', noDataValue);\n    }\n\n    /**\n     *\n     * @param coords\n     * @returns\n     * @public\n     */\n    async requestZValues(\n        originalFeature: Feature<LineString | Point | Polygon>,\n        contour = false\n    ): Promise<{ coordsWithZ: Coordinate[]; zValues: number[] }> {\n        if (!this._initialized) this._init();\n\n        const coords = this._sampleFeatureCoords(\n            originalFeature,\n            contour\n        ).mainCoords;\n\n        let coordsWithZ = [];\n        const zValues: number[] = [];\n\n        const source = this.get('source');\n\n        if (typeof source === 'function') {\n            // Use a custom function\n            coordsWithZ = await source(originalFeature, coords);\n        } else {\n            this._countConnections++;\n            const countConnections = this._countConnections;\n            let errorCount = 0;\n\n            for (const coord of coords) {\n                try {\n                    // If there is a new connection (onChange event), abort this\n                    if (this._countConnections !== countConnections) {\n                        logger(\n                            'New geometry detected, previous requests aborted'\n                        );\n                        return;\n                    }\n\n                    let zValue: number;\n\n                    if (\n                        source instanceof TileWMS &&\n                        this.get('calculateZMethod') === 'getFeatureInfo'\n                    ) {\n                        zValue = await this._getZValuesFromWMS(\n                            coord,\n                            source,\n                            this.getMap().getView()\n                        );\n                    } else {\n                        zValue = await this._getZValuesFromImage(coord);\n                    }\n\n                    if (this.get('noDataValue') !== false) {\n                        zValue =\n                            zValue === this.get('noDataValue') ? 0 : zValue;\n                    }\n\n                    // If null or undefined value is returned, transform to 0\n                    const zValueRound =\n                        typeof zValue !== 'undefined'\n                            ? Number(zValue.toFixed(3))\n                            : 0;\n\n                    coordsWithZ.push([...coord, zValueRound]);\n                    zValues.push(zValueRound);\n                } catch (err) {\n                    errorCount++;\n                    console.error(err);\n                    if (errorCount >= 5) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return { coordsWithZ, zValues };\n    }\n\n    /**\n     * This is trigged once\n     * @protected\n     */\n    _init(): void {\n        this._initialized = true;\n\n        this._addPropertyEvents();\n\n        this.set('samples', this._options.samples, /* silent = */ true);\n\n        this.set(\n            'sampleSizeArea',\n            this._options.sampleSizeArea,\n            /* silent = */ true\n        );\n        this.set(\n            'calculateZMethod',\n            this._options.calculateZMethod,\n            /* silent = */ true\n        );\n        this.set('noDataValue', this._options.noDataValue, /* silent = */ true);\n\n        // Need to be the lastest\n        this.set('source', this._options.source, /* silent = */ false);\n    }\n\n    /**\n     * @protected\n     */\n    _addPropertyEvents(): void {\n        // @ts-expect-error\n        this.on('change:source', (evt: ObjectEvent) => {\n            const source = evt.target.get(evt.key);\n            cleanTiles();\n\n            if (\n                !(source instanceof Function) &&\n                this.get('calculateZMethod') !== 'getFeatureInfo'\n            ) {\n                this._readFromImage = new ReadFromImage(\n                    this.get('source'),\n                    this.get('calculateZMethod'),\n                    this.getMap()\n                );\n            } else {\n                this._readFromImage = null;\n            }\n\n            if (source instanceof TileImage) {\n                // This is useful if the source is aready visible on the map,\n                // and some tiles are already downloaded outside this module\n                source.on('tileloadend', ({ tile }) => {\n                    const tileCoord = tile.tileCoord;\n                    const tileKey = getTileKey(source, tileCoord);\n                    addTile(\n                        tileKey,\n                        // @ts-expect-error\n                        tile.getImage()\n                    );\n                });\n            }\n        });\n    }\n\n    /**\n     * Get some sample coords from the geometry while preserving the vertices.\n     * Each of these coords whill be used to request getFeatureInfo\n     * @protected\n     */\n    _sampleFeatureCoords(\n        drawFeature: Feature<LineString | Point | Polygon>,\n        contour = false\n    ): {\n        mainCoords: Coordinate[];\n        pol?: any;\n    } {\n        const geom = drawFeature.getGeometry();\n        let grid: any, mainCoords: Coordinate[]; // For polygons\n\n        if (geom instanceof Point) {\n            mainCoords = [geom.getCoordinates()];\n        } else if (geom instanceof Polygon) {\n            const polygonFeature = drawFeature as Feature<Polygon>;\n\n            const coords = polygonFeature.getGeometry().getCoordinates()[0];\n\n            grid = getPolygonSamples(\n                polygonFeature,\n                this.getMap().getView().getProjection().getCode(),\n                this.get('sampleSizeArea')\n            );\n\n            if (contour) {\n                const contourGeom = new LineString(coords);\n                mainCoords = getLineSamples(contourGeom, this.get('samples'));\n            } else {\n                mainCoords = grid.map((g) =>\n                    g.getGeometry().getInteriorPoint().getCoordinates()\n                );\n            }\n        } else if (geom instanceof LineString) {\n            mainCoords = getLineSamples(geom, this.get('samples'));\n        }\n\n        return { mainCoords, pol: grid };\n    }\n\n    /**\n     *\n     * @param coordinate\n     * @param source\n     * @returns\n     */\n    async _getZValuesFromImage(coordinate: Coordinate): Promise<number> {\n        return await this._readFromImage.read(coordinate);\n    }\n\n    /**\n     *\n     * @param coordinate\n     * @param source\n     * @param view\n     * @returns\n     */\n    async _getZValuesFromWMS(\n        coordinate: Coordinate,\n        source: TileWMS,\n        view: View\n    ): Promise<number> {\n        const url = source.getFeatureInfoUrl(\n            coordinate,\n            view.getResolution(),\n            view.getProjection(),\n            {\n                INFO_FORMAT: 'application/json',\n                BUFFER: 0,\n                FEATURE_COUNT: 1\n            }\n        );\n\n        const { data } = await axios.get(url, {\n            timeout: AXIOS_TIMEOUT\n        });\n\n        return data.features[0].properties.GRAY_INDEX;\n    }\n}\n\nexport interface IOptions extends Omit<ControlOptions, 'target'> {\n    /**\n     * Source to obtain the elevation values.\n     * If not provided, the zGraph would be not displayed.\n     * You can provide a custom function to call an API or other methods to obtain the data.\n     */\n    source?:\n        | TileWMS\n        | TileImage\n        | XYZ\n        | ((\n              originalFeature: Feature<LineString | Point | Polygon>,\n              sampledCoords: Coordinate[]\n          ) => Promise<Coordinate[]>);\n\n    /**\n     * To obtain the elevation values from the diferrents sources, you can:\n     * - Calculate the zValues from the rgb pixel data (`TileImage` and `XYZ` source formats need this):\n     *     - `Mapbox` preset: (r * 256 * 256 + g * 256 + b) * 0.1 - 10000\n     *     - `Terrarium` preset: (r * 256 + g + b / 256) - 32768\n     *     - Provided your custom function to calculate elevation from the rgb pixel data\n     *\n     * - Making requests to the geoserver (`TileWMS` source)\n     *      `getFeatureInfo`: make requests to the source url using service [getFeatureInfo](https://docs.geoserver.org/stable/en/user/services/wms/reference.html#getfeatureinfo)\n     *\n     * By default:\n     *  - `TileWMS` format use `'getFeatureInfo'` requests to the source_url to obtain the values.\n     *  - `TileImage` and `XYZ` formats are calculated from the pixel data using `'Mapbox'` preset.\n     */\n    calculateZMethod?:\n        | 'getFeatureInfo'\n        | 'Mapbox'\n        | 'Terrarium'\n        | ((r: number, g: number, b: number) => number);\n\n    /**\n     * To obtain the elevation values on each distance measurement, multiples samples are taken across the line.\n     * This number is used as equally percentage steps across the geom, plus all the vertices positions.\n     * - `getFeatureInfo` on TileWMS sources will make one request per sample\n     * - `TileImage`and `XYZ` are calculated across each pixel after downloading the required tiles.\n     * The bigger the number, the greater the quality of the elevation data, but slower response times and\n     * bigger overhead (principally on `getFeatureInfo` method).\n     * `50` is the default\n     *\n     */\n    samples?: number;\n\n    /**\n     * To obtain the elevation values on each volume measurement, multiples samples are taken across the polygon.\n     * Value in meters\n     * The bigger the number, the greater the quality of the measurement, but slower response times and\n     * bigger overhead (principally on `getFeatureInfo` method).\n     * `'auto'` is the default. This use 0.5 on small measurements, and 10 in biggers ones\n     */\n    sampleSizeArea?: number | 'auto';\n\n    /**\n     * When calculating the zGraph statistics from the raster dataset, you can choose to ignore specific values with the NoDataValue parameter.\n     * These values are considerated as transparency, so probably you want these replaced by 0.\n     *\n     * `-10000` is the default\n     * `false` to disable\n     */\n    noDataValue?: number | false;\n\n    /**\n     * console.log to help debug the code\n     * `false` is the default\n     */\n    verbose?: boolean;\n}\n"],"names":["AXIOS_TIMEOUT","getTileGridForProjection","options","defaultOptions"],"mappings":"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"}