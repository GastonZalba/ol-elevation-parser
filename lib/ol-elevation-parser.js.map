{"version":3,"file":"ol-elevation-parser.js","sources":["../src/tiles.ts","../src/helpers.ts","../src/logger.ts","../src/defaults.ts","../src/readFromImage.ts","../src/ol-elevation-parser.ts"],"sourcesContent":["import Geometry from 'ol/geom/Geometry';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { getUid } from 'ol/util';\r\nimport TileImage from 'ol/source/TileImage';\r\n\r\nlet tiles: { [key: string]: HTMLImageElement } = {};\r\n\r\nexport const addTile = (tileKey: string, tile: HTMLImageElement) => {\r\n    tiles[tileKey] = tile;\r\n};\r\n\r\nexport const getTile = (key: string) => {\r\n    return tiles[key];\r\n};\r\n\r\nexport const getTiles = () => {\r\n    return tiles;\r\n};\r\n\r\nexport const cleanTiles = () => {\r\n    tiles = {};\r\n};\r\n\r\nexport const getTileKey = (\r\n    source: TileImage | VectorSource<Geometry>,\r\n    tileCoord: number[]\r\n) => {\r\n    const uidSource = getUid(source);\r\n    return uidSource + '_' + tileCoord.join('-');\r\n};\r\n","// @turf\r\nimport bbox from '@turf/bbox';\r\nimport area from '@turf/area';\r\nimport intersect from '@turf/intersect';\r\nimport { featureCollection } from '@turf/helpers';\r\nimport squareGrid from '@turf/square-grid';\r\n\r\nimport { Coordinate } from 'ol/coordinate';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport LineString from 'ol/geom/LineString';\r\nimport Feature from 'ol/Feature';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { IOptions } from './ol-elevation-parser';\r\n\r\nconst geojson = new GeoJSON();\r\n\r\n/**\r\n *\r\n * @param target\r\n * @param sources\r\n * @returns\r\n */\r\nexport const deepObjectAssign = (target, ...sources) => {\r\n    sources.forEach((source) => {\r\n        Object.keys(source).forEach((key) => {\r\n            const s_val = source[key];\r\n            const t_val = target[key];\r\n            target[key] =\r\n                t_val &&\r\n                s_val &&\r\n                typeof t_val === 'object' &&\r\n                typeof s_val === 'object' &&\r\n                !Array.isArray(t_val) // Don't merge arrays\r\n                    ? deepObjectAssign(t_val, s_val)\r\n                    : s_val;\r\n        });\r\n    });\r\n    return target;\r\n};\r\n\r\nexport const getLineSamples = (\r\n    geom: LineString,\r\n    nSamples: IOptions['samples']\r\n): Coordinate[] => {\r\n    const totalLength = geom.getLength();\r\n\r\n    if (typeof nSamples === 'function') {\r\n        nSamples = nSamples(totalLength);\r\n    }\r\n\r\n    const stepPercentage = 100 / nSamples;\r\n\r\n    const metersSample = totalLength * (stepPercentage / 100);\r\n\r\n    const sampledCoords: Coordinate[] = [];\r\n    let segmentCount = 0;\r\n\r\n    // Get samples every percentage step while conserving all the vertex\r\n    geom.forEachSegment((start, end) => {\r\n        // Only get the first start segment\r\n        if (!segmentCount) {\r\n            sampledCoords.push(start);\r\n        }\r\n\r\n        segmentCount++;\r\n\r\n        const segmentGeom = new LineString([start, end]);\r\n        const segmentLength = segmentGeom.getLength();\r\n\r\n        /**\r\n         * segmentLength -> 100\r\n         * metersSample -> x\r\n         */\r\n        const newPercentage = (100 * metersSample) / segmentLength;\r\n\r\n        // skip 0 and 100\r\n        let segmentStepPercent = newPercentage;\r\n        while (segmentStepPercent < 100) {\r\n            const coordAt = segmentGeom.getCoordinateAt(\r\n                segmentStepPercent / 100\r\n            );\r\n            sampledCoords.push(coordAt);\r\n            segmentStepPercent = segmentStepPercent + newPercentage;\r\n        }\r\n\r\n        sampledCoords.push(end);\r\n    });\r\n\r\n    return sampledCoords;\r\n};\r\n\r\n/**\r\n * @param polygonFeature\r\n * @param nSamples\r\n * @returns\r\n */\r\nexport const getPolygonSamples = (\r\n    polygonFeature: Feature<Polygon>,\r\n    projection: string,\r\n    nSamples: IOptions['sampleSizeArea']\r\n): Feature<Polygon>[] => {\r\n    const polygon = geojson.writeFeatureObject(polygonFeature, {\r\n        dataProjection: 'EPSG:4326',\r\n        featureProjection: projection\r\n    }) as any;\r\n\r\n    const areaPol = area(polygon.geometry);\r\n\r\n    let sampleMeters: number;\r\n\r\n    if (nSamples !== 'auto') {\r\n        if (typeof nSamples === 'number') {\r\n            sampleMeters = nSamples;\r\n        } else if (typeof nSamples === 'function') {\r\n            sampleMeters = nSamples(areaPol);\r\n        }\r\n    } else {\r\n        if (areaPol <= 1000) sampleMeters = 0.5;\r\n        else if (areaPol < 10000) sampleMeters = 1;\r\n        else if (areaPol < 100000) sampleMeters = 10;\r\n        else if (areaPol < 1000000) sampleMeters = 50;\r\n        else sampleMeters = 100;\r\n    }\r\n\r\n    const polygonBbox = bbox(polygon);\r\n\r\n    const grid = squareGrid(polygonBbox, sampleMeters / 1000, {\r\n        units: 'kilometers',\r\n        mask: polygon.geometry\r\n    });\r\n\r\n    let clippedGrid = grid.features.map((feature) =>\r\n        intersect(feature.geometry, polygon)\r\n    );\r\n\r\n    // Remove some random null values\r\n    clippedGrid = clippedGrid.filter((feature) => feature);\r\n\r\n    const clippedGridF = featureCollection(clippedGrid);\r\n\r\n    return geojson.readFeatures(clippedGridF, {\r\n        dataProjection: 'EPSG:4326',\r\n        featureProjection: projection\r\n    }) as Feature<Polygon>[];\r\n};\r\n\r\nexport const average = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;\r\n\r\n/**\r\n *\r\n * @param src\r\n * @returns\r\n */\r\nexport const addSrcToImage = (\r\n    img: HTMLImageElement,\r\n    src: string\r\n): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n        img.onload = () => resolve(img.height);\r\n        img.onerror = reject;\r\n        img.src = src;\r\n    });\r\n};\r\n","export let loggerIsEnabled = false;\r\n\r\nexport const setLoggerActive = (bool: boolean) => {\r\n    loggerIsEnabled = bool;\r\n};\r\n\r\nexport default function logger(...args) {\r\n    if (loggerIsEnabled) console.log(...args);\r\n}\r\n","import { IOptions } from './ol-elevation-parser';\r\nimport { loggerIsEnabled } from './logger';\r\n\r\nconst options: IOptions = {\r\n    source: null,\r\n    calculateZMethod: 'getFeatureInfo',\r\n    samples: 50,\r\n    sampleSizeArea: 'auto',\r\n    noDataValue: -10000,\r\n    verbose: loggerIsEnabled\r\n};\r\n\r\nexport default options;\r\n","import axios from 'axios';\r\n\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport { Coordinate } from 'ol/coordinate';\r\nimport {\r\n    getForProjection as getTileGridForProjection,\r\n    createXYZ\r\n} from 'ol/tilegrid';\r\nimport TileGrid from 'ol/tilegrid/TileGrid';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport TileImage from 'ol/source/TileImage';\r\nimport { Projection } from 'ol/proj';\r\n\r\nimport { addSrcToImage } from './helpers';\r\n\r\nimport { addTile, getTile, getTileKey } from './tiles';\r\nimport { IOptions } from './ol-elevation-parser';\r\n\r\nconst AXIOS_TIMEOUT = 5000;\r\n\r\nconst mapboxExtractElevation = (r: number, g: number, b: number): number => {\r\n    return (r * 256 * 256 + g * 256 + b) * 0.1 - 10000;\r\n};\r\n\r\nconst terrariumExtractElevation = (r: number, g: number, b: number): number => {\r\n    return r * 256 + g + b / 256 - 32768;\r\n};\r\n\r\nexport default class ReadFromImage {\r\n    protected _tileGrid: TileGrid;\r\n    protected _projection: Projection;\r\n    protected _source: TileImage | XYZ;\r\n    protected _view: View;\r\n    protected _calculateZMethod: IOptions['calculateZMethod'];\r\n    protected _canvas: HTMLCanvasElement;\r\n    protected _ctx: CanvasRenderingContext2D;\r\n    protected _img: HTMLImageElement;\r\n    protected _urlFn;\r\n    protected _draws = {};\r\n\r\n    constructor(\r\n        source: TileImage | XYZ,\r\n        calculateZMethod: IOptions['calculateZMethod'],\r\n        map: Map\r\n    ) {\r\n        this._projection =\r\n            source.getProjection() || map.getView().getProjection();\r\n        this._view = map.getView();\r\n        this._urlFn = source.getTileUrlFunction();\r\n        this._tileGrid = this._getTileGrid(source);\r\n        this._source = source;\r\n\r\n        this._calculateZMethod = calculateZMethod;\r\n\r\n        this._canvas = document.createElement('canvas');\r\n        this._ctx = this._canvas.getContext('2d');\r\n    }\r\n\r\n    async read(coordinate: Coordinate) {\r\n        // clear canvas\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n\r\n        const tileCoord = this._tileGrid.getTileCoordForCoordAndResolution(\r\n            coordinate,\r\n            this._view.getResolution()\r\n        );\r\n\r\n        const url = this._urlFn(tileCoord, 1, this._projection);\r\n\r\n        const tileKey = getTileKey(this._source, tileCoord);\r\n        let img;\r\n\r\n        if (!this._draws[tileKey]) {\r\n            let imageTile = getTile(tileKey);\r\n\r\n            // Check if the image was already downloaded\r\n            if (!getTile(tileKey)) {\r\n                const { data } = await axios.get(url, {\r\n                    timeout: AXIOS_TIMEOUT,\r\n                    responseType: 'blob'\r\n                });\r\n                const imageElement = new Image(256, 256);\r\n                const urlCreator = window.URL || window.webkitURL;\r\n                const imageSrc = urlCreator.createObjectURL(data);\r\n                await addSrcToImage(imageElement, imageSrc);\r\n                addTile(tileKey, imageElement);\r\n                imageTile = imageElement;\r\n            }\r\n\r\n            this._canvas.width = imageTile.width;\r\n            this._canvas.height = imageTile.height;\r\n\r\n            //@ts-expect-error\r\n            this._ctx.mozImageSmoothingEnabled = false;\r\n            //@ts-expect-error\r\n            this._ctx.oImageSmoothingEnabled = false;\r\n            //@ts-expect-error\r\n            this._ctx.webkitImageSmoothingEnabled = false;\r\n            //@ts-expect-error\r\n            this._ctx.msImageSmoothingEnabled = false;\r\n            this._ctx.imageSmoothingEnabled = false;\r\n\r\n            // Add image to a canvas\r\n            this._ctx.drawImage(imageTile, 0, 0);\r\n\r\n            img = this._ctx.getImageData(\r\n                0,\r\n                0,\r\n                this._canvas.width,\r\n                this._canvas.height\r\n            );\r\n            this._draws[tileKey] = img;\r\n        }\r\n\r\n        img = this._draws[tileKey];\r\n\r\n        const zoom = tileCoord[0];\r\n        const origin = this._tileGrid.getOrigin(zoom);\r\n        const res = this._tileGrid.getResolution(zoom);\r\n        const tileSize = this._tileGrid.getTileSize(zoom);\r\n\r\n        const w = Math.floor(\r\n            ((coordinate[0] - origin[0]) / res) %\r\n                (tileSize[0] | (tileSize as number))\r\n        );\r\n        const h = Math.floor(\r\n            ((origin[1] - coordinate[1]) / res) %\r\n                (tileSize[1] | (tileSize as number))\r\n        );\r\n\r\n        const imgData = img.data;\r\n        const index = (w + h * 256) * 4;\r\n        const pixel = [\r\n            imgData[index + 0],\r\n            imgData[index + 1],\r\n            imgData[index + 2],\r\n            imgData[index + 3]\r\n        ];\r\n\r\n        return this._extractValuesFromPixelDEM(pixel);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param source\r\n     * @returns\r\n     */\r\n    _getTileGrid(source) {\r\n        let tilegrid = source.getTileGrid();\r\n        // If not tileGrid is provided, set a default for XYZ sources\r\n        if (!tilegrid) {\r\n            if (source instanceof XYZ) {\r\n                const defaultTileGrid = createXYZ();\r\n                tilegrid = new TileGrid({\r\n                    origin: defaultTileGrid.getOrigin(0),\r\n                    resolutions: defaultTileGrid.getResolutions()\r\n                });\r\n            } else {\r\n                tilegrid = getTileGridForProjection(this._projection);\r\n            }\r\n        }\r\n\r\n        return tilegrid;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @param pixel\r\n     * @returns\r\n     */\r\n    _extractValuesFromPixelDEM(pixel: number[]): number {\r\n        if (\r\n            this._calculateZMethod &&\r\n            typeof this._calculateZMethod === 'function'\r\n        ) {\r\n            return this._calculateZMethod(pixel[0], pixel[1], pixel[2]);\r\n        } else if (this._calculateZMethod === 'Mapbox') {\r\n            return mapboxExtractElevation(pixel[0], pixel[1], pixel[2]);\r\n        } else if (this._calculateZMethod === 'Terrarium') {\r\n            return terrariumExtractElevation(pixel[0], pixel[1], pixel[2]);\r\n        }\r\n    }\r\n}\r\n","import LineString from 'ol/geom/LineString';\r\nimport Point from 'ol/geom/Point';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport Control, { Options as ControlOptions } from 'ol/control/Control';\r\nimport TileImage from 'ol/source/TileImage';\r\nimport TileWMS from 'ol/source/TileWMS';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport View from 'ol/View';\r\nimport { Coordinate } from 'ol/coordinate';\r\nimport Feature from 'ol/Feature';\r\nimport Map from 'ol/Map';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { addTile, cleanTiles, getTileKey } from './tiles';\r\nimport { deepObjectAssign, getLineSamples, getPolygonSamples } from './helpers';\r\nimport defaultOptions from './defaults';\r\nimport logger, { setLoggerActive } from './logger';\r\nimport ReadFromImage from './readFromImage';\r\n\r\nconst AXIOS_TIMEOUT = 5000;\r\n\r\n/**\r\n * @extends {ol/control/Control~Control}\r\n * @fires change:samples\r\n * @fires change:sampleSizeArea\r\n * @fires change:source\r\n * @fires change:calculateZMethod\r\n * @fires change:noDataValue\r\n * @param options\r\n */\r\nexport default class ElevationParser extends Control {\r\n    protected _options: IOptions;\r\n    protected _countConnections = 0;\r\n    protected _readFromImage: ReadFromImage;\r\n\r\n    protected _initialized = false;\r\n\r\n    constructor(options: IOptions) {\r\n        super({\r\n            element: document.createElement('div')\r\n        });\r\n\r\n        this._options = deepObjectAssign(defaultOptions, options);\r\n\r\n        // Change the default 'getFeatureInfo' method if the source is not TileWMS\r\n        if (\r\n            !(this._options.source instanceof TileWMS) &&\r\n            this._options.calculateZMethod === 'getFeatureInfo'\r\n        ) {\r\n            this._options.calculateZMethod = 'Mapbox';\r\n        }\r\n\r\n        setLoggerActive(this._options.verbose);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param feature\r\n     * @returns\r\n     * @public\r\n     */\r\n    async getElevationValues(\r\n        feature: Feature<LineString | Point | Polygon>\r\n    ): Promise<IGetElevationValues> {\r\n        const { sampledCoords, gridPolygons } =\r\n            this._sampleFeatureCoords(feature);\r\n\r\n        let contourCoords: Coordinate[], mainCoords: Coordinate[];\r\n\r\n        const source = this.get('source');\r\n\r\n        if (typeof source === 'function') {\r\n            // Use a custom function. Useful for using apis to retrieve the zvalues\r\n            ({ mainCoords, contourCoords } = await source(\r\n                feature,\r\n                sampledCoords\r\n            ));\r\n        } else {\r\n            mainCoords = await this._getZFromSampledCoords(\r\n                sampledCoords.mainCoords\r\n            );\r\n\r\n            // Only Polygons\r\n            if (sampledCoords.contourCoords) {\r\n                contourCoords = await this._getZFromSampledCoords(\r\n                    sampledCoords.contourCoords\r\n                );\r\n            }\r\n        }\r\n        return {\r\n            mainCoords,\r\n            ...(contourCoords && {\r\n                contourCoords\r\n            }),\r\n            ...(gridPolygons && {\r\n                gridPolygons\r\n            })\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @param source\r\n     */\r\n    setSource(source: IOptions['source']): void {\r\n        this.set('source', source);\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @returns\r\n     */\r\n    getSource(): IOptions['source'] {\r\n        return this.get('source');\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @param samples\r\n     */\r\n    setSamples(samples: IOptions['samples']): void {\r\n        this.set('samples', samples);\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @param sampleSizeArea\r\n     */\r\n    setSampleSizeArea(sampleSizeArea: IOptions['sampleSizeArea']): void {\r\n        this.set('sampleSizeArea', sampleSizeArea);\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @param calculateZMethod\r\n     */\r\n    setCalculateZMethod(calculateZMethod: IOptions['calculateZMethod']): void {\r\n        this.set('calculateZMethod', calculateZMethod);\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @param noDataValue\r\n     */\r\n    setNoDataValue(noDataValue: IOptions['noDataValue']): void {\r\n        this.set('noDataValue', noDataValue);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @param map\r\n     * @TODO remove events if map is null\r\n     */\r\n    setMap(map: Map): void {\r\n        super.setMap(map);\r\n\r\n        if (map) {\r\n            // Run once\r\n            if (!this._initialized) this._init();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param coords\r\n     * @returns\r\n     * @private\r\n     */\r\n    _getZFromSampledCoords = async (\r\n        coords: Coordinate[]\r\n    ): Promise<Coordinate[]> => {\r\n        this._countConnections++;\r\n        const countConnections = this._countConnections;\r\n        let errorCount = 0;\r\n\r\n        const coordsWithZ = [];\r\n\r\n        const source = this.get('source');\r\n\r\n        // Flexible error trigger if multiples coords must be requested.\r\n        // If only one coord is needed, the error is strict and raised inmediatly\r\n        // This is useful if multipels coords are needed, and maybe one or two return error\r\n        const countErrorsLimit = coords.length >= 5 ? 1 : 5;\r\n\r\n        for (const coord of coords) {\r\n            try {\r\n                // If there is a new connection (onChange event), abort this\r\n                if (this._countConnections !== countConnections) {\r\n                    logger('New geometry detected, previous requests aborted');\r\n                    return;\r\n                }\r\n\r\n                let zValue: number;\r\n\r\n                if (\r\n                    source instanceof TileWMS &&\r\n                    this.get('calculateZMethod') === 'getFeatureInfo'\r\n                ) {\r\n                    zValue = await this._getZValuesFromWMS(\r\n                        coord,\r\n                        source,\r\n                        this.getMap().getView()\r\n                    );\r\n                } else {\r\n                    zValue = await this._getZValuesFromImage(coord);\r\n                }\r\n\r\n                if (this.get('noDataValue') !== false) {\r\n                    zValue = zValue === this.get('noDataValue') ? 0 : zValue;\r\n                }\r\n\r\n                // If null or undefined value is returned, transform to 0\r\n                const zValueRound =\r\n                    typeof zValue !== 'undefined'\r\n                        ? Number(zValue.toFixed(3))\r\n                        : 0;\r\n\r\n                coordsWithZ.push([...coord, zValueRound]);\r\n            } catch (err) {\r\n                errorCount++;\r\n                console.error(err);\r\n                if (errorCount >= countErrorsLimit) {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n\r\n        return coordsWithZ;\r\n    };\r\n\r\n    /**\r\n     * This is trigged once\r\n     * @protected\r\n     */\r\n    _init(): void {\r\n        this._initialized = true;\r\n\r\n        this._addPropertyEvents();\r\n\r\n        this.set('samples', this._options.samples, /* silent = */ true);\r\n\r\n        this.set(\r\n            'sampleSizeArea',\r\n            this._options.sampleSizeArea,\r\n            /* silent = */ true\r\n        );\r\n        this.set(\r\n            'calculateZMethod',\r\n            this._options.calculateZMethod,\r\n            /* silent = */ true\r\n        );\r\n        this.set('noDataValue', this._options.noDataValue, /* silent = */ true);\r\n\r\n        // Need to be the latest\r\n        this.set('source', this._options.source, /* silent = */ false);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _addPropertyEvents(): void {\r\n        // @ts-expect-error\r\n        this.on('change:source', (evt: ObjectEvent) => {\r\n            const source = evt.target.get(evt.key);\r\n            cleanTiles();\r\n\r\n            if (\r\n                !(source instanceof Function) &&\r\n                this.get('calculateZMethod') !== 'getFeatureInfo'\r\n            ) {\r\n                this._readFromImage = new ReadFromImage(\r\n                    this.get('source'),\r\n                    this.get('calculateZMethod'),\r\n                    this.getMap()\r\n                );\r\n            } else {\r\n                this._readFromImage = null;\r\n            }\r\n\r\n            if (source instanceof TileImage) {\r\n                // This is useful if the source is aready visible on the map,\r\n                // and some tiles are already downloaded outside this module\r\n                source.on('tileloadend', ({ tile }) => {\r\n                    const tileCoord = tile.tileCoord;\r\n                    const tileKey = getTileKey(source, tileCoord);\r\n                    addTile(\r\n                        tileKey,\r\n                        // @ts-expect-error\r\n                        tile.getImage()\r\n                    );\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get some sample coords from the geometry while preserving the vertices.\r\n     *\r\n     * @param feature\r\n     * @returns\r\n     * @protected\r\n     */\r\n    _sampleFeatureCoords(\r\n        feature: Feature<LineString | Point | Polygon>\r\n    ): ISampledCoords {\r\n        const geom = feature.getGeometry();\r\n\r\n        let gridPolygons: Feature<Polygon>[],\r\n            contourCoords: Coordinate[],\r\n            mainCoords: Coordinate[]; // For polygons\r\n\r\n        if (geom instanceof Point) {\r\n            mainCoords = [geom.getCoordinates()];\r\n        } else if (geom instanceof Polygon) {\r\n            const polygonFeature = feature as Feature<Polygon>;\r\n\r\n            const sub_coords = polygonFeature.getGeometry().getCoordinates()[0];\r\n            const contourGeom = new LineString(sub_coords);\r\n            contourCoords = getLineSamples(contourGeom, this.get('samples'));\r\n\r\n            gridPolygons = getPolygonSamples(\r\n                polygonFeature,\r\n                this.getMap().getView().getProjection().getCode(),\r\n                this.get('sampleSizeArea')\r\n            );\r\n            mainCoords = gridPolygons.map((g) =>\r\n                g.getGeometry().getInteriorPoint().getCoordinates()\r\n            );\r\n        } else if (geom instanceof LineString) {\r\n            mainCoords = getLineSamples(geom, this.get('samples'));\r\n        }\r\n\r\n        return {\r\n            sampledCoords: {\r\n                mainCoords,\r\n                contourCoords\r\n            },\r\n            gridPolygons\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param coordinate\r\n     * @returns\r\n     * @private\r\n     */\r\n    async _getZValuesFromImage(coordinate: Coordinate): Promise<number> {\r\n        return await this._readFromImage.read(coordinate);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param coordinate\r\n     * @param source\r\n     * @param view\r\n     * @returns\r\n     * @private\r\n     */\r\n    async _getZValuesFromWMS(\r\n        coordinate: Coordinate,\r\n        source: TileWMS,\r\n        view: View\r\n    ): Promise<number> {\r\n        const url = source.getFeatureInfoUrl(\r\n            coordinate,\r\n            view.getResolution(),\r\n            view.getProjection(),\r\n            {\r\n                INFO_FORMAT: 'application/json',\r\n                BUFFER: 0,\r\n                FEATURE_COUNT: 1\r\n            }\r\n        );\r\n\r\n        const { data } = await axios.get(url, {\r\n            timeout: AXIOS_TIMEOUT\r\n        });\r\n\r\n        return data.features[0].properties.GRAY_INDEX;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\ninterface ISampledCoords {\r\n    sampledCoords: IElevationCoords;\r\n    gridPolygons?: Feature<Polygon>[];\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IGetElevationValues extends IElevationCoords {\r\n    /**\r\n     * Sampled Polygons\r\n     */\r\n    gridPolygons: Feature<Polygon>[];\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IElevationCoords {\r\n    /**\r\n     * Sampled coordinates from LineStrings, Point coordinates,\r\n     * or sampled coordinates from Polygons, obtained by subdividing the area in multiples squares and getting each center point.\r\n     */\r\n    mainCoords: Coordinate[];\r\n    /**\r\n     * Contour coordinates from Polygons features.\r\n     */\r\n    contourCoords?: Coordinate[];\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IOptions extends Omit<ControlOptions, 'target'> {\r\n    /**\r\n     * Source to obtain the elevation values.\r\n     * If not provided, the zGraph would be not displayed.\r\n     * You can provide a custom function to call an API or other methods to obtain the data.\r\n     */\r\n    source:\r\n        | TileWMS\r\n        | TileImage\r\n        | XYZ\r\n        | ((\r\n              originalFeature: Feature<LineString | Point | Polygon>,\r\n              sampledCoords: IElevationCoords\r\n          ) => Promise<IElevationCoords>);\r\n\r\n    /**\r\n     * To obtain the elevation values from the diferrents sources, you can:\r\n     * - Calculate the zValues from the rgb pixel data (`TileImage` and `XYZ` source formats need this):\r\n     *     - `Mapbox` preset: (r * 256 * 256 + g * 256 + b) * 0.1 - 10000\r\n     *     - `Terrarium` preset: (r * 256 + g + b / 256) - 32768\r\n     *     - Provided your custom function to calculate elevation from the rgb pixel data\r\n     *\r\n     * - Making requests to the geoserver (`TileWMS` source)\r\n     *      `getFeatureInfo`: make requests to the source url using service [getFeatureInfo](https://docs.geoserver.org/stable/en/user/services/wms/reference.html#getfeatureinfo)\r\n     *\r\n     * By default:\r\n     *  - `TileWMS` format use `'getFeatureInfo'` requests to the source_url to obtain the values.\r\n     *  - `TileImage` and `XYZ` formats are calculated from the pixel data using `'Mapbox'` preset.\r\n     */\r\n    calculateZMethod?:\r\n        | 'getFeatureInfo'\r\n        | 'Mapbox'\r\n        | 'Terrarium'\r\n        | ((r: number, g: number, b: number) => number);\r\n\r\n    /**\r\n     * To obtain the elevation values on each distance measurement, multiples samples are taken across the line.\r\n     * This number is used as equally percentage steps across the geom, plus all the vertices positions.\r\n     * - `getFeatureInfo` on TileWMS sources will make one request per sample\r\n     * - `TileImage`and `XYZ` are calculated across each pixel after downloading the required tiles.\r\n     * The bigger the number, the greater the quality of the elevation data, but slower response times and\r\n     * bigger overhead (principally on `getFeatureInfo` method).\r\n     * This value is used to sample LinesStrings and Polygons contour\r\n     * `50` is the default\r\n     *\r\n     */\r\n    samples?: number | ((length: number) => number);\r\n\r\n    /**\r\n     * To obtain the elevation values on a volume measurement, multiples samples are taken across the polygon.\r\n     * The value provided must be in meters. The bigger the number, the greater the quality of the measurement,\r\n     * but slower response times and bigger overhead (principally on `getFeatureInfo` method).\r\n     * `'auto'` is the default\r\n     */\r\n    sampleSizeArea?: number | 'auto' | ((area: number) => number);\r\n\r\n    /**\r\n     * When calculating the zGraph statistics from the raster dataset, you can choose to ignore specific values with the NoDataValue parameter.\r\n     * These values are considerated as transparency, so probably you want these replaced by 0.\r\n     *\r\n     * `-10000` is the default\r\n     * `false` to disable\r\n     */\r\n    noDataValue?: number | false;\r\n\r\n    /**\r\n     * console.log to help debug the code\r\n     * `false` is the default\r\n     */\r\n    verbose?: boolean;\r\n}\r\n"],"names":["AXIOS_TIMEOUT","getTileGridForProjection","options","defaultOptions"],"mappings":"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"}