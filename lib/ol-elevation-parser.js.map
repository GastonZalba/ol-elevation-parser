{"version":3,"file":"ol-elevation-parser.js","sources":["../src/tiles.ts","../src/ol-elevation-parser.ts"],"sourcesContent":["import Geometry from 'ol/geom/Geometry';\nimport VectorSource from 'ol/source/Vector';\nimport { getUid } from 'ol/util';\nimport TileImage from 'ol/source/TileImage';\n\nlet tiles: { [key: string]: HTMLImageElement } = {};\n\nexport const addTile = (tileKey: string, tile: HTMLImageElement) => {\n    tiles[tileKey] = tile;\n};\n\nexport const getTile = (key: string) => {\n    return tiles[key];\n};\n\nexport const getTiles = () => {\n    return tiles;\n};\n\nexport const cleanTiles = () => {\n    tiles = {};\n};\n\nexport const getTileKey = (\n    source: TileImage | VectorSource<Geometry>,\n    tileCoord: number[]\n) => {\n    const uidSource = getUid(source);\n    return uidSource + '_' + tileCoord.join('-');\n};\n","import LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\nimport { PluggableMap } from 'ol';\nimport TileImage from 'ol/source/TileImage';\nimport TileGrid from 'ol/tilegrid/TileGrid';\nimport {\n    createXYZ,\n    getForProjection as getTileGridForProjection\n} from 'ol/tilegrid';\nimport TileWMS from 'ol/source/TileWMS';\nimport XYZ from 'ol/source/XYZ';\nimport View from 'ol/View';\nimport { Coordinate } from 'ol/coordinate';\nimport Feature from 'ol/Feature';\n\nimport axios from 'axios';\n\nimport { addTile, getTile, getTileKey } from './tiles';\n\nconst AXIOS_TIMEOUT = 5000;\n\nexport * from './tiles';\n\nexport default class ElevationParser {\n    protected _elevationSamples: IOptions['samples'];\n    protected _calcualateZMethod: IOptions['calculateZMethod'];\n    protected _elevationSource: IOptions['source'];\n\n    public _options: IOptions;\n    protected _map: PluggableMap;\n    protected _countConnections = 0;\n\n    constructor(map: PluggableMap, options: IOptions) {\n        this._options = options;\n        this._map = map;\n    }\n\n    /**\n     *\n     * @param coords\n     * @returns\n     * @public\n     */\n    async requestZValues(\n        originalFeature: Feature<LineString | Point>\n    ): Promise<{ coordsWithZ: number[]; zValues: number[] }> {\n        const coords = this._sampleFeatureCoords(originalFeature);\n\n        let coordsWithZ = [];\n        const zValues: number[] = [];\n\n        const source = this._options.source;\n\n        if (typeof source === 'function') {\n            // Use a custom function\n            coordsWithZ = await source(originalFeature, coords);\n        } else {\n            this._countConnections++;\n            const countConnections = this._countConnections;\n            let errorCount = 0;\n\n            for (const coord of coords) {\n                try {\n                    // If there is a new connection (onChange event), abort this\n                    if (this._countConnections !== countConnections) {\n                        console.log(\n                            'New geometry detected, previous requests aborted'\n                        );\n                        return;\n                    }\n\n                    let zValue: number;\n\n                    if (\n                        source instanceof TileWMS &&\n                        this._options.calculateZMethod === 'getFeatureInfo'\n                    ) {\n                        zValue = await this._getZValuesFromWMS(\n                            coord,\n                            source,\n                            this._map.getView()\n                        );\n                    } else {\n                        zValue = await this._getZValuesFromImage(coord, source);\n                    }\n\n                    if (this._options.noDataValue !== false) {\n                        zValue =\n                            zValue === this._options.noDataValue ? 0 : zValue;\n                    }\n\n                    // If null or undefined value is returned, transform to 0\n                    const zValueRound =\n                        typeof zValue !== 'undefined'\n                            ? Number(zValue.toFixed(3))\n                            : 0;\n\n                    coordsWithZ.push([...coord, zValueRound]);\n                    zValues.push(zValueRound);\n                } catch (err) {\n                    errorCount++;\n                    console.error(err);\n                    if (errorCount >= 5) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return { coordsWithZ, zValues };\n    }\n\n    /**\n     * Get some sample coords from the geometry while preserving the vertices.\n     * Each of these coords whill be used to request getFeatureInfo\n     * @protected\n     */\n    _sampleFeatureCoords(\n        drawFeature: Feature<LineString | Point>\n    ): Coordinate[] {\n        const geom = drawFeature.getGeometry();\n\n        if (geom instanceof Point) return [geom.getCoordinates()];\n\n        const stepPercentage = 100 / this._options.samples;\n\n        const totalLength = geom.getLength();\n\n        const metersSample = totalLength * (stepPercentage / 100);\n\n        console.log('Total length', totalLength);\n        console.log(`Samples every ${metersSample.toFixed(2)} meters`);\n\n        const sampledCoords: Coordinate[] = [];\n        let segmentCount = 0;\n\n        // Get samples every percentage step while conserving all the vertex\n        geom.forEachSegment((start, end) => {\n            // Only get the first start segment\n            if (!segmentCount) {\n                sampledCoords.push(start);\n            }\n\n            segmentCount++;\n\n            const segmentGeom = new LineString([start, end]);\n            const segmentLength = segmentGeom.getLength();\n\n            /**\n             * segmentLength -> 100\n             * metersSample -> x\n             */\n            const newPercentage = (100 * metersSample) / segmentLength;\n\n            // skip 0 and 100\n            let segmentStepPercent = newPercentage;\n            while (segmentStepPercent < 100) {\n                const coordAt = segmentGeom.getCoordinateAt(\n                    segmentStepPercent / 100\n                );\n                sampledCoords.push(coordAt);\n                segmentStepPercent = segmentStepPercent + newPercentage;\n            }\n\n            sampledCoords.push(end);\n        });\n\n        console.log('Vertices', sampledCoords.length);\n        console.log('Segments', segmentCount);\n\n        return sampledCoords;\n    }\n\n    /**\n     *\n     * @param coordinate\n     * @param source\n     * @returns\n     */\n    async _getZValuesFromImage(\n        coordinate: Coordinate,\n        source: TileImage | XYZ\n    ): Promise<number> {\n        const addSrcToImage = (\n            img: HTMLImageElement,\n            src: string\n        ): Promise<any> => {\n            return new Promise((resolve, reject) => {\n                img.onload = () => resolve(img.height);\n                img.onerror = reject;\n                img.src = src;\n            });\n        };\n\n        let tilegrid = source.getTileGrid();\n\n        // If not tileGrid is provided, set a default for XYZ sources\n        if (!tilegrid) {\n            if (source instanceof XYZ) {\n                const defaultTileGrid = createXYZ();\n                tilegrid = new TileGrid({\n                    origin: defaultTileGrid.getOrigin(0),\n                    resolutions: defaultTileGrid.getResolutions()\n                });\n            } else {\n                tilegrid = getTileGridForProjection(\n                    this._map.getView().getProjection()\n                );\n            }\n        }\n\n        const tileCoord = tilegrid.getTileCoordForCoordAndResolution(\n            coordinate,\n            this._map.getView().getResolution()\n        );\n\n        const urlFn = source.getTileUrlFunction();\n\n        const projection =\n            source.getProjection() || this._map.getView().getProjection();\n\n        const url = urlFn(tileCoord, 1, projection);\n\n        //@ts-expect-error\n        const tileKey = getTileKey(this._options.source, tileCoord);\n\n        let imageTile = getTile(tileKey);\n\n        // Check if the image was already downloaded\n        if (!getTile(tileKey)) {\n            const { data } = await axios.get(url, {\n                timeout: AXIOS_TIMEOUT,\n                responseType: 'blob'\n            });\n            const urlCreator = window.URL || window.webkitURL;\n            const imageSrc = urlCreator.createObjectURL(data);\n            const imageElement = new Image();\n            await addSrcToImage(imageElement, imageSrc);\n            addTile(tileKey, imageElement);\n            imageTile = imageElement;\n        }\n\n        const origin = tilegrid.getOrigin(tileCoord[0]);\n        const res = tilegrid.getResolution(tileCoord[0]);\n        const tileSize = tilegrid.getTileSize(tileCoord[0]);\n        const w = Math.floor(\n            ((coordinate[0] - origin[0]) / res) %\n                (tileSize[0] | (tileSize as number))\n        );\n        const h = Math.floor(\n            ((origin[1] - coordinate[1]) / res) %\n                (tileSize[1] | (tileSize as number))\n        );\n\n        const canvas = document.createElement('canvas');\n        canvas.width = imageTile.width;\n        canvas.height = imageTile.height;\n\n        // Add image to a canvas\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(imageTile, 0, 0);\n\n        const img = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const imgData = img.data;\n        const index = (w + h * 256) * 4;\n        const pixel = [\n            imgData[index + 0],\n            imgData[index + 1],\n            imgData[index + 2],\n            imgData[index + 3]\n        ];\n\n        return this._extractValuesFromPixelDEM(pixel);\n    }\n\n    /**\n     *\n     * @param coordinate\n     * @param source\n     * @param view\n     * @returns\n     */\n    async _getZValuesFromWMS(\n        coordinate: Coordinate,\n        source: TileWMS,\n        view: View\n    ): Promise<number> {\n        const url = source.getFeatureInfoUrl(\n            coordinate,\n            view.getResolution(),\n            view.getProjection(),\n            {\n                INFO_FORMAT: 'application/json',\n                BUFFER: 0,\n                FEATURE_COUNT: 1\n            }\n        );\n\n        const { data } = await axios.get(url, {\n            timeout: AXIOS_TIMEOUT\n        });\n\n        return data.features[0].properties.GRAY_INDEX;\n    }\n\n    /**\n     * @protected\n     * @param pixel\n     * @returns\n     */\n    _extractValuesFromPixelDEM(pixel: number[]): number {\n        const mapboxExtractElevation = (\n            r: number,\n            g: number,\n            b: number\n        ): number => {\n            return (r * 256 * 256 + g * 256 + b) * 0.1 - 10000;\n        };\n\n        const terrariumExtractElevation = (\n            r: number,\n            g: number,\n            b: number\n        ): number => {\n            return r * 256 + g + b / 256 - 32768;\n        };\n\n        if (\n            this._options.calculateZMethod &&\n            typeof this._options.calculateZMethod === 'function'\n        ) {\n            return this._options.calculateZMethod(pixel[0], pixel[1], pixel[2]);\n        } else if (this._options.calculateZMethod === 'Mapbox') {\n            return mapboxExtractElevation(pixel[0], pixel[1], pixel[2]);\n        } else if (this._options.calculateZMethod === 'Terrarium') {\n            return terrariumExtractElevation(pixel[0], pixel[1], pixel[2]);\n        }\n    }\n}\n\nexport interface IOptions {\n    /**\n     * Source to obtain the elevation values.\n     * If not provided, the zGraph would be not displayed.\n     * You can provide a custom function to call an API or other methods to obtain the data.\n     */\n    source?:\n        | TileWMS\n        | TileImage\n        | XYZ\n        | ((\n              originalFeature: Feature<LineString | Point>,\n              sampledCoords: Coordinate[]\n          ) => Promise<Coordinate[]>);\n\n    /**\n     * To obtain the elevation values from the diferrents sources, you can:\n     * - Calculate the zValues from the rgb pixel data (`TileImage` and `XYZ` source formats need this):\n     *     - `Mapbox` preset: (r * 256 * 256 + g * 256 + b) * 0.1 - 10000\n     *     - `Terrarium` preset: (r * 256 + g + b / 256) - 32768\n     *     - Provided your custom function to calculate elevation from the rgb pixel data\n     *\n     * - Making requests to the geoserver (`TileWMS` source)\n     *      `getFeatureInfo`: make requests to the source url using service [getFeatureInfo](https://docs.geoserver.org/stable/en/user/services/wms/reference.html#getfeatureinfo)\n     *\n     * By default:\n     *  - `TileWMS` format use `'getFeatureInfo'` requests to the source_url to obtain the values.\n     *  - `TileImage` and `XYZ` formats are calculated from the pixel data using `'Mapbox'` preset.\n     */\n    calculateZMethod?:\n        | 'getFeatureInfo'\n        | 'Mapbox'\n        | 'Terrarium'\n        | ((r: number, g: number, b: number) => number);\n\n    /**\n     * To obtain the elevation values on each distance measurement, multiples samples are taken across the line.\n     * This number is used as equally percentage steps across the geom, plus all the vertices positions.\n     * - `getFeatureInfo` on TileWMS sources will make one request per sample\n     * - `TileImage`and `XYZ` are calculated across each pixel after downloading the required tiles.\n     * The bigger the number, the greater the quality of the elevation data, but slower response times and\n     * bigger overhead (principally on `getFeatureInfo` method).\n     * `50` is the default\n     *\n     */\n    samples?: number;\n\n    /**\n     * When calculating the zGraph statistics from the raster dataset, you can choose to ignore specific values with the NoDataValue parameter.\n     * These values are considerated as transparency, so probably you want these replaced by 0.\n     *\n     * `-10000` is the default\n     * `false` to disable\n     */\n    noDataValue?: number | false;\n}\n"],"names":["getTileGridForProjection"],"mappings":"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"}